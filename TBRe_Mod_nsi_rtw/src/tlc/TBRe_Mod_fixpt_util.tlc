%function CGIRBlockRegisterFixPointFunctions() void
%if !ISFIELD(FixPtUtils,"look1_iu8lu16n16ts16Ds_FbqVATJM")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_iu8lu16n16ts16Ds_FbqVATJM",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern int16_T look1_iu8lu16n16ts16Ds_FbqVATJM(uint8_T u0, const uint8_T bp0[], const int16_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
int16_T look1_iu8lu16n16ts16Ds_FbqVATJM(uint8_T u0, const uint8_T bp0[], const int16_T table[], uint32_T maxIndex)
{
    int16_T y;
    uint16_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Lookup 1-D
   Canonical function name: look1_iu8lu16n16ts16Ds32_binlcas
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear'
   Extrapolation method: 'Clip'
   Use last breakpoint for index at or above upper limit: 'on'
   Remove protection against out-of-range input in generated code: 'off'
   Rounding mode: 'simplest'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Clip'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'on'
   Remove protection against out-of-range input in generated code: 'off'
   Rounding mode: 'simplest'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = 0U;
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (uint16_T)(((uint32_T)(uint8_T)((uint32_T)u0 - bp0[iLeft]) << 16) / (uint8_T)((uint32_T)bp0[iLeft + 1U] - bp0[iLeft]));
    } else {
        iLeft = maxIndex;
        frac = 0U;
    }
    /* Interpolation 1-D
   Interpolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'on'
   Rounding mode: 'simplest'
   Overflow mode: 'wrapping'
 */
    if (iLeft == maxIndex) {
        y = table[iLeft];
    } else {
        y = (int16_T)((int16_T)(((table[iLeft + 1U] - table[iLeft]) * frac) >> 16) + table[iLeft]);
    }
    return y;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_iu8lu16n16ts16Ds_FbqVATJM",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_iu8lu16n16ts16Ds_FbqVATJM", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_iu8lu16n16ts16Ds_FbqVATJM", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_iu8lu16n16ts16Ds_FbqVATJM")


%if !ISFIELD(FixPtUtils,"look1_iu16tdIu16_binlca")
%assign tmpRet = SETFIELD(FixPtUtils,"look1_iu16tdIu16_binlca",1)
%assign fcnProBuf =""
%openfile fcnProBuf
extern uint16_T look1_iu16tdIu16_binlca(uint16_T u0, const uint16_T bp0[], const real_T table[], uint32_T maxIndex);
%closefile fcnProBuf
%assign fcnDefBuf =""
%openfile fcnDefBuf
%assign fcnRec = SLibFcnPrototypeToRec(fcnProBuf)
%addtorecord fcnRec Abstract "" Category "utility" ...
             GeneratedBy "" Type "Utility"
%<SLibDumpFunctionBanner(fcnRec)>
%undef fcnRec
uint16_T look1_iu16tdIu16_binlca(uint16_T u0, const uint16_T bp0[], const real_T table[], uint32_T maxIndex)
{
    uint16_T y;
    real_T frac;
    uint32_T iRght;
    uint32_T iLeft;
    uint32_T bpIdx;
    /* Lookup 1-D
   Search method: 'binary'
   Use previous index: 'off'
   Interpolation method: 'Linear'
   Extrapolation method: 'Clip'
   Use last breakpoint for index at or above upper limit: 'on'
   Remove protection against out-of-range input in generated code: 'off'
 */
    /* Prelookup - Index and Fraction
   Index Search method: 'binary'
   Extrapolation method: 'Clip'
   Use previous index: 'off'
   Use last breakpoint for index at or above upper limit: 'on'
   Remove protection against out-of-range input in generated code: 'off'
 */
    if (u0 <= bp0[0U]) {
        iLeft = 0U;
        frac = 0.0;
    } else if (u0 < bp0[maxIndex]) {
        /* Binary Search */
        bpIdx = maxIndex >> 1U;
        iLeft = 0U;
        iRght = maxIndex;
        while (iRght - iLeft > 1U) {
            if (u0 < bp0[bpIdx]) {
                iRght = bpIdx;
            } else {
                iLeft = bpIdx;
            }
            bpIdx = (iRght + iLeft) >> 1U;
        }
        frac = (real_T)(uint16_T)((uint32_T)u0 - bp0[iLeft]) / (real_T)(uint16_T)((uint32_T)bp0[iLeft + 1U] - bp0[iLeft]);
    } else {
        iLeft = maxIndex;
        frac = 0.0;
    }
    /* Interpolation 1-D
   Interpolation method: 'Linear'
   Use last breakpoint for index at or above upper limit: 'on'
   Overflow mode: 'wrapping'
 */
    if (iLeft == maxIndex) {
        y = (uint16_T)table[iLeft];
    } else {
        y = (uint16_T)((uint32_T)(uint16_T)((table[iLeft + 1U] - table[iLeft]) * frac) + (uint16_T)table[iLeft]);
    }
    return y;
}
%closefile fcnDefBuf
%<LibPushEmptyStackSharedUtils()>
%<SLibDumpUtilsSourceCode("look1_iu16tdIu16_binlca",fcnProBuf,fcnDefBuf)>
%if !EXISTS(::CompiledModel.GenUtilsSrcInSharedLocation) || (::CompiledModel.GenUtilsSrcInSharedLocation == 0)
%assign fcnProPragmaBuf =""
%openfile fcnProPragmaBuf
  %<SLibGetFcnMemSecPragmaOnDecl("look1_iu16tdIu16_binlca", "MemSecFuncSharedUtil", "Pre")>\
  %<fcnProBuf>
  %<SLibGetFcnMemSecPragmaOnDecl("look1_iu16tdIu16_binlca", "MemSecFuncSharedUtil", "Post")>\
%closefile fcnProPragmaBuf
  %<LibCacheFunctionPrototype(fcnProPragmaBuf)>
%endif
%assign incStackBuf = LibPopStackSharedUtilsIncludes()
%undef incStackBuf
%undef fcnProPragmaBuf
%undef fcnProBuf
%undef fcnDefBuf
%endif %% !ISFIELD(FixPtUtils,"look1_iu16tdIu16_binlca")


%endfunction


